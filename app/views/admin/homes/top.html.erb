<div class="container">
    <div class="row">
         <table class="table">
            <thead class="table-light">
                <tr>
                <th scope="col-md-3">購入日時</th>
                <th scope="col-md-3">購入者</th>
                <th scope="col-md-3">注文個数</th>
                <th scope="col-md-3">注文ステータス</th>
                </tr>
            </thead>
            <tbody>
        <% @orders.each do |order| %>
                <tr>
                <th scope="col-md-3"><%= link_to order.created_at.strftime("%Y-%m-%d %H:%M"), admin_order_path(order.id) %></th>
                <th scope="col-md-3"><%= order.name %></th>
                <th scope="col-md-3">
                    <%# order.order_lists.each do |order_list| %>
     <!-- アソシエーションで結ばれている（ER図参照）テーブルからの情報取得。
    　       order(1) : order_lists(N) : item(1)
    　         
    　        order(N):item(N)この2者は
    　        お互いに見ると他となり、他対他となるので直接結べない。
    　        そのため仲介役となるorder_listsが中間テーブルとして役割を果たす。
    　       
    　        orderからitemテーブルの情報が欲しいときは
    　        ER図通りorder=>order_lists(複数!)=>item
    　        orderの情報を全部取ってきて
    　        order_listsの中身を見れるようにする。
    　        order_listsの中にあるitemを何個も取り出す（ぐるぐるまわす）
    　        のでeachを使う。順番につないでいく。
    　        -->
    　            
                     <%#= order_list.amount %>
                     <!-- 注文した商品の合計を表示
                     ①inject ②each文 += を組み合わせて足していく方法
                     -->
                    <%# end %>
                    
                    <%= order.order_lists.inject(0) { |sum, order_list| sum + order_list.amount } %>
                    <!-- inject = 繰り返しの処理をする。複数のデータが必要。
                    | |　ブロック変数、変数を２個指定できる。どんどん計算した計算結果を表示するのに適している。
                    sum <= 計算結果を入れる変数() <= 計算のスタートする値を決められる。
                    -->
                </th>
                <th scope="col-md-3">注文ステータス</th>
                </tr>
        <% end %>
            </tbody>
         </table>
    </div>
</div>
